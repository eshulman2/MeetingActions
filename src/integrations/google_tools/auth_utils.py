"""General utils for google api"""

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google.oauth2.service_account import Credentials as SACred
from google_auth_oauthlib.flow import InstalledAppFlow

from src.infrastructure.logging.logging_config import get_logger

logger = get_logger("google_tools.utils")

# Generated by gemini

# If modifying these scopes, delete the file token.json.
SCOPES = [
    "https://www.googleapis.com/auth/documents.readonly",
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/meetings.space.readonly",
    "https://www.googleapis.com/auth/gmail.compose",
    "https://www.googleapis.com/auth/gmail.readonly",
]


# Authentication function
def authenticate() -> Credentials:
    """Handles user authentication and authorization."""
    logger.info("Starting Google API authentication")
    try:
        creds = None

        # The file token.json stores the user's access and refresh tokens, and
        # is created automatically when the authorization flow completes for
        # the first time.
        if os.path.exists("token.json"):
            logger.debug("Found existing token.json file")
            creds = Credentials.from_authorized_user_file("token.json", SCOPES)
        # If there are no (valid) credentials available, let the user log in.
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                logger.info("Refreshing expired credentials")
                creds.refresh(Request())
            else:
                logger.info("Starting OAuth flow for new credentials")
                # This will open a browser window for you to log in and
                # authorize the app.
                flow = InstalledAppFlow.from_client_secrets_file(
                    "credentials.json", SCOPES
                )
                creds = flow.run_local_server(port=0)
            # Save the credentials for the next run
            logger.debug("Saving credentials to token.json")
            with open("token.json", "w") as token:
                token.write(creds.to_json())

        logger.info("Google API authentication completed successfully")
        return creds
    except Exception as err:
        logger.error(
            "Unable to get authenticated using oath due to the "
            f"following error: {err}"
        )
    try:
        logger.info("Trying service account authentication")
        creds = SACred.from_service_account_file("service_account.json")
        logger.info("Google API authentication completed successfully")
        return creds
    except Exception as err:
        logger.error(
            "Unable to authenticate to service account with the "
            f"following error: {err}"
        )
        raise err
